[{"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/_app.js":"1","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/_document.js":"2","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/index.js":"3","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Footer/index.js":"4","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Header/index.js":"5","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/content-script.js":"6","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/index.js":"7","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/old-index.js":"8","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Lists/index.js":"9","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Import/index.js":"10"},{"size":1430,"mtime":1702551090532,"results":"11","hashOfConfig":"12"},{"size":398,"mtime":1698129173104,"results":"13","hashOfConfig":"12"},{"size":678,"mtime":1702541989377,"results":"14","hashOfConfig":"12"},{"size":1598,"mtime":1698931190199,"results":"15","hashOfConfig":"12"},{"size":4176,"mtime":1702550686323,"results":"16","hashOfConfig":"12"},{"size":30033,"mtime":1702544870080,"results":"17","hashOfConfig":"12"},{"size":8224,"mtime":1702543315198,"results":"18","hashOfConfig":"12"},{"size":2774,"mtime":1697738919755,"results":"19","hashOfConfig":"12"},{"size":6700,"mtime":1699082030067,"results":"20","hashOfConfig":"12"},{"size":4543,"mtime":1702561467241,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bf008y",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/_app.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/_document.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/pages/index.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Footer/index.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Header/index.js",["55"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { BookmarkPlus } from 'lucide-react';\nimport { readAllLists, upsertList } from '../../utils/db';\n\nexport default function Header({ navigateToPage, activePage, getActionGlobal, setSelectedListId, listsProp }) {\n  const [lists, setLists] = useState([]);\n  const [selectedList, setSelectedList] = useState(null);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const dropdownButtonRef = useRef(null);\n  const dropdownModalRef = useRef(null);\n\n  const fetchLists = async () => {\n    const allLists = await readAllLists();\n    setLists(allLists);\n    if (!selectedList) setSelectedList(allLists[0]?.id || null); // set only if not already set\n  };\n\n  useEffect(() => {\n    fetchLists();\n\n    const handleClickOutside = (event) => {\n      if (dropdownButtonRef.current && !dropdownButtonRef.current.contains(event.target) &&\n          dropdownModalRef.current && !dropdownModalRef.current.contains(event.target)) {\n        setShowDropdown(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleAddToSelectedList = async () => {\n    if (!selectedList || !getActionGlobal) return;\n\n    const listToUpdate = lists.find(list => list.id === selectedList);\n    if (!listToUpdate) return;\n\n    const itemIndex = listToUpdate.items.findIndex(item => item.userid === getActionGlobal.userid);\n\n    let updatedItems;\n    if (itemIndex > -1) {\n      updatedItems = [...listToUpdate.items];\n      updatedItems[itemIndex] = getActionGlobal;\n    } else {\n      updatedItems = [...listToUpdate.items, getActionGlobal];\n    }\n\n    const updatedList = {\n      ...listToUpdate,\n      items: updatedItems,\n    };\n\n    await upsertList(updatedList);\n    fetchLists();\n    setShowDropdown(false);\n  };\n\n  const handleListSelection = (id) => {\n    setSelectedListId(id);\n    setShowDropdown(false);\n  };\n\n  const getButtonText = () => {\n    if (selectedList) return lists.find(list => list.id === selectedList)?.name;\n    return lists.length ? 'Select a list' : 'Create a list';\n  };\n\n  // Function to navigate to the imports page\n  const navigateToImports = () => {\n    navigateToPage('import');\n  };\n\n  return (\n    <header className=\"w-100 px-4 py-2 flex justify-between items-center bg-gray-100\">\n      {activePage !== 'index' ? (\n        <button className=\"text-blue-500 hover:text-blue-700\" onClick={() => navigateToPage('index')}>\n          Go back to home\n        </button>\n      ) : (\n        <div>\n          <button className=\"text-blue-500 hover:text-blue-700 mr-2\" onClick={() => navigateToPage('lists')}>\n            View all lists\n          </button>\n          <button className=\"text-blue-500 hover:text-blue-700\" onClick={navigateToImports}>\n            Import\n          </button>\n        </div>\n      )}\n\n      <div className=\"relative flex items-center\">\n        <button\n          ref={dropdownButtonRef}\n          onClick={() => setShowDropdown(!showDropdown)}\n          className=\"border rounded mr-2 p-2 cursor-pointer hover:bg-gray-200\"\n        >\n          {getButtonText()}\n        </button>\n\n        {showDropdown && (\n          <div\n            ref={dropdownModalRef}\n            className=\"absolute top-full mt-2 w-64 border rounded shadow-md bg-white z-10\"\n          >\n            {lists.length ? (\n              lists.map(list => (\n                <div\n                  key={list.id}\n                  onClick={() => handleListSelection(list.id)}\n                  className=\"cursor-pointer p-2 hover:bg-gray-200\"\n                >\n                  {list.name}\n                </div>\n              ))\n            ) : (\n              <div className=\"p-2 text-gray-600\">No lists available</div>\n            )}\n          </div>\n        )}\n\n        <button\n          onClick={handleAddToSelectedList}\n          className=\"bg-blue-500 text-white py-1 px-3 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring focus:border-blue-300\"\n        >\n          <BookmarkPlus className=\"w-6 h-6\" />\n        </button>\n      </div>\n    </header>\n  );\n}\n","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/content-script.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/index.js",["56","57"],[],"import React, { useEffect, useState } from 'react';\nimport { BallTriangle, CirclesWithBar, Dna, FidgetSpinner, Hourglass, InfinitySpin, Puff, RotatingSquare } from \"react-loader-spinner\";\nimport { ActionClass } from './content-script';\nimport { Mail, Phone } from 'lucide-react';\n\n\nexport default function Index({ navigateToPage, setActionGlobal}) {\n  const [username, setUsername] = useState('');\n  const [isValid, setIsValid] = useState(null);  // null initially, then true or false\n  const [actionInstance, setActionInstance] = useState(null);  // null initially, then the actionInstance object\n\n  useEffect(() => {\n    async function fetchData() {\n      console.log('fetching data');\n      chrome.tabs.query({active: true, currentWindow: true}, async function(tabs) {\n        let tab = tabs[0];\n        let url = new URL(tab.url);\n\n        if (url.hostname === 'www.instagram.com') {\n          let pathParts = url.pathname.split('/').filter(Boolean);\n          let username = pathParts[0];\n          if (username) {\n            setUsername(username);\n            let actionInstance = new ActionClass(username);\n            console.log(\"starting to solve\")\n            await actionInstance.solve();\n            console.log(\"done solving\")\n            console.log('actionInstance', actionInstance);\n            setIsValid(actionInstance.isValidUsername);\n            setActionInstance(actionInstance);\n            setActionGlobal(actionInstance);\n          } else {\n            console.log('username is null');\n            setIsValid(false);\n          }\n        } else {\n          console.log(\"Not an Instagram page\");\n        }\n      });\n    }\n\n    fetchData();\n  }, []); // Dependency array remains empty\n\nreturn (\n<div className=\"container mx-auto px-4\">\n  {isValid === null ? (\n    <div className=\"flex justify-center items-center h-screen\">\n      <Puff color=\"#1c0a1f\" height={100} width={100} />\n    </div>\n  ) : isValid ? (\n    <div className=\"my-4 bg-white shadow-md rounded-lg overflow-hidden\">\n      {/* Navigation and Hamburger Menu */}\n\n      {/* Main Content */}\n      <div className=\"p-4 text-center\">\n        <img className=\"rounded-full mx-auto mb-4\" src={actionInstance ? actionInstance.profilePicture : ''} alt=\"Profile Pic\" width=\"100\" />\n        <h3 className=\"text-lg font-semibold\">{username}</h3>\n        <h4 className=\"text-md\">{actionInstance ? actionInstance.fullName : ''}</h4>\n\n        {/* Contact Icons */}\n        <div className=\"flex justify-center gap-4 my-4\">\n            <a\n              href={`mailto:${actionInstance?.email}`}\n              className={`button ${!actionInstance?.email ? 'opacity-50 cursor-not-allowed' : ''}`}\n              disabled={!actionInstance?.email}\n            >\n              <Mail title=\"Email\" />\n            </a>\n            <a\n              href={`https://wa.me/${actionInstance?.phoneNumber}`}\n              className={`button ${!actionInstance?.phoneNumber ? 'opacity-50 cursor-not-allowed' : ''}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              disabled={!actionInstance?.phoneNumber}\n            >\n              <Phone title=\"Phone Number\" />\n            </a>\n        </div>\n\n\n        <div className='px-4 py-2 bg-slate-200 my-4'>\n          <p>{actionInstance.bio}</p>\n        </div>\n        {/* Metrics */}\n        <div className=\"flex flex-wrap px-4 my-4 gap-4\"> {/* Added gap-4 for spacing between cards */}\n  {/* Assuming actionInstance has properties like followerCount, followingCount, etc. */}\n  {actionInstance && (\n    <>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\"> {/* Added w-full sm:w-auto to prevent stretching on small screens */}\n        <p>Follower Count</p>\n        <p>{actionInstance.followerCount.toLocaleString()}</p> {/* toLocaleString adds commas for thousands */}\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Following Count</p>\n        <p>{actionInstance.followingCount.toLocaleString()}</p>\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Post Count</p>\n        <p>{actionInstance.postCount.toLocaleString()}</p>\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Engagement Rate</p>\n        <p>{(actionInstance.er * 100).toFixed(2)} %</p> {/* Fixed to 2 decimal places */}\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Average Comments</p>\n        <p>{actionInstance.avgComments.toFixed(2)}</p> {/* Fixed to 2 decimal places */}\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Average Likes</p>\n        <p>{actionInstance.avgLikes.toFixed(2)}</p> {/* Fixed to 2 decimal places */}\n      </div>\n      <div className=\"px-4 py-2 my-2 bg-red-500 text-white rounded-lg shadow-md\">\n        <p>Average Views</p>\n        <p>{actionInstance.avgViews.toFixed(2)}</p> {/* Fixed to 2 decimal places */}\n      </div>\n      {actionInstance.erOfReach != null && (\n      <div className=\"px-4 py-2 my-2 bg-blue-500 text-white rounded-lg shadow-md\">\n        <p>ER of Reach</p>\n        <p>{(actionInstance.erOfReach * 100).toFixed(2)} %</p>\n      </div>\n    )}\n    {actionInstance.avgReelsPlay30d != null && (\n      <div className=\"px-4 py-2 my-2 bg-green-500 text-white rounded-lg shadow-md\">\n        <p>Average Reels Plays (30d)</p>\n        <p>{actionInstance.avgReelsPlay30d.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.avgReach != null && (\n      <div className=\"px-4 py-2 my-2 bg-purple-500 text-white rounded-lg shadow-md\">\n        <p>Average Reach</p>\n        <p>{actionInstance.avgReach.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.storyReach != null && (\n      <div className=\"px-4 py-2 my-2 bg-yellow-500 text-white rounded-lg shadow-md\">\n        <p>Story Reach</p>\n        <p>{actionInstance.storyReach.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.imageReach != null && (\n      <div className=\"px-4 py-2 my-2 bg-pink-500 text-white rounded-lg shadow-md\">\n        <p>Image Reach</p>\n        <p>{actionInstance.imageReach.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.reelsReach != null && (\n      <div className=\"px-4 py-2 my-2 bg-indigo-500 text-white rounded-lg shadow-md\">\n        <p>Reels Reach</p>\n        <p>{actionInstance.reelsReach.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.imageEngagementRate != null && (\n      <div className=\"px-4 py-2 my-2 bg-teal-500 text-white rounded-lg shadow-md\">\n        <p>Image Engagement Rate</p>\n        <p>{(actionInstance.imageEngagementRate * 100).toFixed(2)} %</p>\n      </div>\n    )}\n    {actionInstance.reelsEngagementRate != null && (\n      <div className=\"px-4 py-2 my-2 bg-orange-500 text-white rounded-lg shadow-md\">\n        <p>Reels Engagement Rate</p>\n        <p>{(actionInstance.reelsEngagementRate * 100).toFixed(2)} %</p>\n      </div>\n    )}\n    {actionInstance.imgAvgLikes != null && (\n      <div className=\"px-4 py-2 my-2 bg-lime-500 text-white rounded-lg shadow-md\">\n        <p>Image Average Likes</p>\n        <p>{actionInstance.imgAvgLikes.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.reelsAvgLikes != null && (\n      <div className=\"px-4 py-2 my-2 bg-amber-500 text-white rounded-lg shadow-md\">\n        <p>Reels Average Likes</p>\n        <p>{actionInstance.reelsAvgLikes.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.imageAvgComments != null && (\n      <div className=\"px-4 py-2 my-2 bg-cyan-500 text-white rounded-lg shadow-md\">\n        <p>Image Average Comments</p>\n        <p>{actionInstance.imageAvgComments.toFixed(2)}</p>\n      </div>\n    )}\n    {actionInstance.reelsAvgComments != null && (\n      <div className=\"px-4 py-2 my-2 bg-emerald-500 text-white rounded-lg shadow-md\">\n        <p>Reels Average Comments</p>\n        <p>{actionInstance.reelsAvgComments.toFixed(2)}</p>\n      </div>\n    )}\n    </>\n  )}\n</div>\n\n      </div>\n\n    </div>\n  ) : (\n    <div className=\"bg-red-500 text-white px-4 py-3 rounded relative\" role=\"alert\">\n      Invalid Instagram Username or Not an Instagram page\n    </div>\n  )}\n</div>\n\n);\n};\n\n","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Index/old-index.js",[],[],"/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Lists/index.js",["58"],[],"import React, { useEffect, useState } from 'react';\nimport { Plus, Download, Trash2, XCircle } from 'lucide-react';\nimport { deleteListFromDB, readAllLists, upsertList } from '../../utils/db';\n\nexport default function Lists() {\n  const [lists, setLists] = useState([]);\n  const [newListName, setNewListName] = useState('');\n  const [currentList, setCurrentList] = useState(null); // For the modal\n\n  useEffect(() => {\n    const fetchLists = async () => {\n      const allLists = await readAllLists();\n      console.log('allLists:', allLists)\n      console.log('currentList:', currentList)\n      setLists(allLists);\n    };\n\n    fetchLists();\n  }, []);\n\n  const handleAddList = async () => {0\n    const newList = {\n      id: Date.now(),\n      name: newListName,\n      items: [],\n      updatedAt: Date.now(),\n    };\n\n    const constructInstagramUrl = username => `https://www.instagram.com/${username}`;\n\n    await upsertList(newList);\n    const updatedLists = await readAllLists();\n    setLists(updatedLists);\n    setNewListName('');\n  };\n\n  const updateList = async (id, newName) => {\n    const listToUpdate = lists.find((list) => list.id === id);\n    const updatedList = {\n      ...listToUpdate,\n      name: newName,\n      updatedAt: Date.now(),\n    };\n\n    await upsertList(updatedList);\n    const updatedLists = await readAllLists();\n    setLists(updatedLists);\n    setCurrentList(updatedList);\n  };\n\n  const deleteList = async (id) => {\n    // TODO: Implement a delete function in db.js and call it here\n    await deleteListFromDB(id);\n    const updatedLists = await readAllLists();\n    setLists(updatedLists);\n    setCurrentList(null);\n  };\n\n\n// Downloads the list as CSV\n  const downloadListAsCSV = (list) => {\n    // Map your list items to CSV format\n    const csvContent = list.items.map(item =>\n      [\n        item.username,\n        `https://instagram.com/${item.username}`,\n        item.fullName,\n        item.avgComments,\n        item.avgLikes,\n        item.avgReach,\n        item.followerCount,\n        item.followingCount,\n        item.imageReach,\n        item.imageEngagementRate,\n        item.reelsViews,\n        item.reelsAvgLikes,\n        item.reelsEngagementRate,\n        item.reelsReach,\n        item.storyReach,\n        item.totalComments,\n        item.totalEngagement,\n        item.totalLikes,\n        item.totalViews,\n        item.email,\n        item.phoneNumber\n        // Add any other item properties here\n      ].join(',')\n    ).join('\\n');\n\n    // Add a header row if needed\n    const header = [\n      'Username',\n      'Instagram URL',\n      'Full Name',\n      'Average Comments',\n      'Average Likes',\n      'Average Reach',\n      'Follower Count',\n      'Following Count',\n      'Image Reach',\n      'Image Engagement Rate',\n      'Reels Views',\n      'Reels Average Likes',\n      'Reels Engagement Rate',\n      'Reels Reach',\n      'Story Reach',\n      'Total Comments',\n      'Total Engagement',\n      'Total Likes',\n      'Total Views',\n      'Email',\n      'Phone Number'\n      // Add any other headers here\n    ].join(',');\n\n    const csvFileContent = `data:text/csv;charset=utf-8,${header}\\n${csvContent}`;\n\n    // Create a link to download the csv\n    const encodedUri = encodeURI(csvFileContent);\n    const link = document.createElement('a');\n    link.setAttribute('href', encodedUri);\n    link.setAttribute('download', `${list.name}.csv`);\n    document.body.appendChild(link); // Required for FF\n\n    // Trigger the download\n    link.click();\n\n    // Clean up the DOM\n    document.body.removeChild(link);\n  };\n\n  // Opens the modal to display the list details\n  const showListDetails = (list) => {\n    console.log('showListDetails invoked ',  list);\n    setCurrentList(list);\n  };\n\n  // Closes the modal\n  const closeListDetails = () => {\n    setCurrentList(null);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      {/* Add List Section */}\n      <div className=\"flex items-center mb-4\">\n        <input\n          type=\"text\"\n          placeholder=\"New List Name\"\n          className=\"p-2 border border-gray-200 rounded flex-grow\"\n          value={newListName}\n          onChange={(e) => setNewListName(e.target.value)}\n        />\n        <button\n          className=\"ml-2 p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          onClick={handleAddList}\n          disabled={!newListName}\n        >\n          <Plus className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Lists Display */}\n      <div>\n        {lists.sort((a, b) => b.updatedAt - a.updatedAt).map((list) => (\n          <div key={list.id} className=\"p-4 mb-2 border border-gray-200 rounded flex justify-between items-center\">\n            <span className=\"cursor-pointer\" onClick={() => showListDetails(list)}>\n              {list.name}\n            </span>\n            <div>\n              <button\n                className=\"p-2 bg-green-500 text-white rounded hover:bg-green-600\"\n                onClick={() => downloadListAsCSV(list)}\n              >\n                <Download className=\"w-5 h-5\" />\n              </button>\n              <button\n                className=\"p-2 bg-red-500 text-white rounded hover:bg-red-600\"\n                onClick={() => deleteList(list.id)}\n              >\n                <Trash2 className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* List Details Modal */}\n      {currentList && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"my-modal\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"mt-3 text-center\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{currentList.name}</h3>\n              <div className=\"mt-2 px-7 py-3\">\n                {/* Instagram Usernames */}\n                <div className=\"space-y-3\">\n                  {currentList.items.length > 0\n                    ? currentList.items.map((item, index) => (\n                        <div key={index} className=\"text-sm text-gray-500\">\n                          {item.username}\n                        </div>\n                      ))\n                    : <div>Nothing to display here.</div>}\n                </div>\n              </div>\n              <div className=\"items-center px-4 pb-3\">\n                <button\n                  className=\"mx-auto bg-red-500 text-white p-2 rounded hover:bg-red-600\"\n                  onClick={closeListDetails}\n                >\n                  <XCircle className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n\n    </div>\n  );\n}\n","/Users/macintosh/SoftwareShack/chromeExtension/next-chrome-starter/components/Import/index.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":32,"column":6,"nodeType":"61","endLine":32,"endColumn":8,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":43,"column":6,"nodeType":"61","endLine":43,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":57,"column":9,"nodeType":"67","endLine":57,"endColumn":142},{"ruleId":"59","severity":1,"message":"68","line":19,"column":6,"nodeType":"61","endLine":19,"endColumn":8,"suggestions":"69"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchLists'. Either include it or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'setActionGlobal'. Either include it or remove the dependency array. If 'setActionGlobal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["71"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has a missing dependency: 'currentList'. Either include it or remove the dependency array.",["72"],{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [fetchLists]",{"range":"79","text":"80"},"Update the dependencies array to be: [setActionGlobal]",{"range":"81","text":"82"},"Update the dependencies array to be: [currentList]",{"range":"83","text":"84"},[1201,1203],"[fetchLists]",[1670,1672],"[setActionGlobal]",[645,647],"[currentList]"]